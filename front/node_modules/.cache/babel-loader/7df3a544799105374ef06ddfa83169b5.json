{"ast":null,"code":"import _toConsumableArray from \"/mnt/c/Users/akthd/OneDrive/\\uBC14\\uD0D5 \\uD654\\uBA74/werewolf/werewolf/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/mnt/c/Users/akthd/OneDrive/\\uBC14\\uD0D5 \\uD654\\uBA74/werewolf/werewolf/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/mnt/c/Users/akthd/OneDrive/\\uBC14\\uD0D5 \\uD654\\uBA74/werewolf/werewolf/front/src/components/chatRoom.jsx\";\nimport React, { useState, useCallback, useEffect, useContext, useRef } from \"react\";\nimport { makeMessage, SocketContext, SOCKET_EVENT } from \"./../service/socket\";\nimport MessageForm from \"./MessageForm\";\nfunction ChatRoom(_ref) {\n  var _this = this;\n  var nickname = _ref.nickname;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var chatWindow = useRef(null);\n  var socket = useContext(SocketContext);\n\n  // 새 메시지를 받으면 스크롤을 이동하는 함수\n  var moveScrollToReceiveMessage = useCallback(function () {\n    if (chatWindow.current) {\n      chatWindow.current.scrollTo({\n        top: chatWindow.current.scrollHeight,\n        behavior: \"smooth\"\n      });\n    }\n  }, []);\n\n  // RECEIVE_MESSAGE 이벤트 콜백: messages state에 데이터를 추가합니다.\n  var handleReceiveMessage = useCallback(function (pongData) {\n    var newMessage = makeMessage(pongData); // makeMessage는 아직 구현하지 않은 함수.\n    setMessages(function (messages) {\n      return [].concat(_toConsumableArray(messages), [newMessage]);\n    });\n    moveScrollToReceiveMessage();\n  }, [moveScrollToReceiveMessage]);\n  useEffect(function () {\n    socket.on(SOCKET_EVENT.RECEIVE_MESSAGE, handleReceiveMessage); // 이벤트 리스너 설치\n\n    return function () {\n      socket.off(SOCKET_EVENT.RECEIVE_MESSAGE, handleReceiveMessage); // 이벤트 리스너 해제\n    };\n  }, [socket, handleReceiveMessage]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-column\",\n    style: {\n      width: 1000\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, nickname), \" \\uB2D8 \\uD658\\uC601\\uD569\\uB2C8\\uB2E4!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-window card\",\n    ref: chatWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, messages.map(function (message, index) {\n    var nickname = message.nickname,\n      content = message.content,\n      time = message.time; // messages 배열을 map함수로 돌려 각 원소마다 item을 렌더링 해줍니다.\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"d-flex flex-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, nickname && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-nickname\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 28\n      }\n    }, nickname, \": \"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, content), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"time\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }, time));\n  })), /*#__PURE__*/React.createElement(MessageForm, {\n    nickname: nickname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n}\nexport default ChatRoom;","map":{"version":3,"names":["React","useState","useCallback","useEffect","useContext","useRef","makeMessage","SocketContext","SOCKET_EVENT","MessageForm","ChatRoom","_ref","_this","nickname","_useState","_useState2","_slicedToArray","messages","setMessages","chatWindow","socket","moveScrollToReceiveMessage","current","scrollTo","top","scrollHeight","behavior","handleReceiveMessage","pongData","newMessage","concat","_toConsumableArray","on","RECEIVE_MESSAGE","off","createElement","className","style","width","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","message","index","content","time","key"],"sources":["/mnt/c/Users/akthd/OneDrive/바탕 화면/werewolf/werewolf/front/src/components/chatRoom.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect, useContext, useRef } from \"react\";\r\nimport { makeMessage, SocketContext, SOCKET_EVENT } from \"./../service/socket\";\r\nimport MessageForm from \"./MessageForm\";\r\n\r\nfunction ChatRoom({ nickname }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const chatWindow = useRef(null);\r\n  const socket = useContext(SocketContext);\r\n\r\n  // 새 메시지를 받으면 스크롤을 이동하는 함수\r\n  const moveScrollToReceiveMessage = useCallback(() => { \r\n    if (chatWindow.current) {\r\n      chatWindow.current.scrollTo({\r\n        top: chatWindow.current.scrollHeight,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // RECEIVE_MESSAGE 이벤트 콜백: messages state에 데이터를 추가합니다.\r\n  const handleReceiveMessage = useCallback(pongData => {\r\n      const newMessage = makeMessage(pongData); // makeMessage는 아직 구현하지 않은 함수.\r\n      setMessages(messages => [...messages, newMessage]);\r\n      moveScrollToReceiveMessage();\r\n    },\r\n    [moveScrollToReceiveMessage]\r\n  );\r\n\r\n  useEffect(() => {\r\n    socket.on(SOCKET_EVENT.RECEIVE_MESSAGE, handleReceiveMessage); // 이벤트 리스너 설치\r\n\r\n    return () => {\r\n      socket.off(SOCKET_EVENT.RECEIVE_MESSAGE, handleReceiveMessage); // 이벤트 리스너 해제\r\n    };\r\n  }, [socket, handleReceiveMessage]);\r\n\r\n  return (\r\n    <div\r\n      className=\"d-flex flex-column\"\r\n      style={{ width: 1000 }}\r\n    >\r\n      <div className=\"text-box\">\r\n        <span>{nickname}</span> 님 환영합니다!\r\n      </div>\r\n      <div\r\n        className=\"chat-window card\"\r\n        ref={chatWindow}\r\n      >\r\n        {messages.map((message, index) => { \r\n          const { nickname, content, time } = message;\r\n          // messages 배열을 map함수로 돌려 각 원소마다 item을 렌더링 해줍니다.\r\n          return (\r\n            <div key={index} className=\"d-flex flex-row\">\r\n              {nickname && <div className=\"message-nickname\">{nickname}: </div>}\r\n              <div>{content}</div>\r\n              <div className=\"time\">{time}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <MessageForm nickname={nickname}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACnF,SAASC,WAAW,EAAEC,aAAa,EAAEC,YAAY,QAAQ,qBAAqB;AAC9E,OAAOC,WAAW,MAAM,eAAe;AAEvC,SAASC,QAAQA,CAAAC,IAAA,EAAe;EAAA,IAAAC,KAAA;EAAA,IAAZC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;EAAA,IAAAC,SAAA,GACMb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAMI,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC/B,IAAMe,MAAM,GAAGhB,UAAU,CAACG,aAAa,CAAC;;EAExC;EACA,IAAMc,0BAA0B,GAAGnB,WAAW,CAAC,YAAM;IACnD,IAAIiB,UAAU,CAACG,OAAO,EAAE;MACtBH,UAAU,CAACG,OAAO,CAACC,QAAQ,CAAC;QAC1BC,GAAG,EAAEL,UAAU,CAACG,OAAO,CAACG,YAAY;QACpCC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAMC,oBAAoB,GAAGzB,WAAW,CAAC,UAAA0B,QAAQ,EAAI;IACjD,IAAMC,UAAU,GAAGvB,WAAW,CAACsB,QAAQ,CAAC,CAAC,CAAC;IAC1CV,WAAW,CAAC,UAAAD,QAAQ;MAAA,UAAAa,MAAA,CAAAC,kBAAA,CAAQd,QAAQ,IAAEY,UAAU;IAAA,CAAC,CAAC;IAClDR,0BAA0B,CAAC,CAAC;EAC9B,CAAC,EACD,CAACA,0BAA0B,CAC7B,CAAC;EAEDlB,SAAS,CAAC,YAAM;IACdiB,MAAM,CAACY,EAAE,CAACxB,YAAY,CAACyB,eAAe,EAAEN,oBAAoB,CAAC,CAAC,CAAC;;IAE/D,OAAO,YAAM;MACXP,MAAM,CAACc,GAAG,CAAC1B,YAAY,CAACyB,eAAe,EAAEN,oBAAoB,CAAC,CAAC,CAAC;IAClE,CAAC;EACH,CAAC,EAAE,CAACP,MAAM,EAAEO,oBAAoB,CAAC,CAAC;EAElC,oBACE3B,KAAA,CAAAmC,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEvB5C,KAAA,CAAAmC,aAAA;IAAKC,SAAS,EAAC,UAAU;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACvB5C,KAAA,CAAAmC,aAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAO/B,QAAe,CAAC,2CACpB,CAAC,eACNb,KAAA,CAAAmC,aAAA;IACEC,SAAS,EAAC,kBAAkB;IAC5BS,GAAG,EAAE1B,UAAW;IAAAoB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEf3B,QAAQ,CAAC6B,GAAG,CAAC,UAACC,OAAO,EAAEC,KAAK,EAAK;IAAA,IACxBnC,QAAQ,GAAoBkC,OAAO,CAAnClC,QAAQ;MAAEoC,OAAO,GAAWF,OAAO,CAAzBE,OAAO;MAAEC,IAAI,GAAKH,OAAO,CAAhBG,IAAI,EAC/B;IACA,oBACElD,KAAA,CAAAmC,aAAA;MAAKgB,GAAG,EAAEH,KAAM;MAACZ,SAAS,EAAC,iBAAiB;MAAAG,MAAA,EAAA3B,KAAA;MAAA4B,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACzC/B,QAAQ,iBAAIb,KAAA,CAAAmC,aAAA;MAAKC,SAAS,EAAC,kBAAkB;MAAAG,MAAA,EAAA3B,KAAA;MAAA4B,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAE/B,QAAQ,EAAC,IAAO,CAAC,eACjEb,KAAA,CAAAmC,aAAA;MAAAI,MAAA,EAAA3B,KAAA;MAAA4B,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAMK,OAAa,CAAC,eACpBjD,KAAA,CAAAmC,aAAA;MAAKC,SAAS,EAAC,MAAM;MAAAG,MAAA,EAAA3B,KAAA;MAAA4B,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEM,IAAU,CAC9B,CAAC;EAEV,CAAC,CACE,CAAC,eACNlD,KAAA,CAAAmC,aAAA,CAAC1B,WAAW;IAACI,QAAQ,EAAEA,QAAS;IAAA0B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAC,CAC9B,CAAC;AAEV;AAEA,eAAelC,QAAQ"},"metadata":{},"sourceType":"module"}